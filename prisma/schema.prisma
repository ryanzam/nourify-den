generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Order   Order[]
  Account Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Food {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  price        Int
  image        String?
  isFeatured   Boolean  @default(false)
  createdAt    DateTime @default(now())
  options      Json[]
  foodCategory String

  category Category @relation(fields: [foodCategory], references: [category])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  image       String?
  category    String   @unique
  createdAt   DateTime @default(now())

  foods Food[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  foods     Json[]
  status    String
  price     Int
  intent_id String?  @unique
  createdAt DateTime @default(now())
  userEmail String

  user User @relation(fields: [userEmail], references: [email])
}
